#!/usr/bin/env ruby

ENV["RAILS_ENV"] ||= 'daemon_dev'
require File.expand_path("../../config/environment", __FILE__)
require File.expand_path('../question_types', __FILE__)
require 'set'

$twitter_user = 'twitholegame'
$twitter_password = '4ssh0le!'
$max_tweets = 1000
$max_questions = 1000
$min_tweets = 250
$sleep_period = 60 # seconds

$question_types = QuestionType::Chooser.new(
  HowManyTweets.new(        :weight => 2,   :value => 30, :countdown => 10),
  HowManyCharacters.new(    :weight => 2,   :value => 10, :countdown => 8),
  HowManyFollowers.new(     :weight => 2,   :value => 30, :countdown => 10),
  HowManyRetweets.new(      :weight => 10,  :value => 30, :countdown => 10),
  GuessTagForTweet.new(     :weight => 2,   :value => 30, :countdown => 15),
  GuessTweetForTag.new(     :weight => 2,   :value => 30, :countdown => 15),
  HasMoreFollowers.new(     :weight => 2,   :value => 15, :countdown => 10),
  HasMoreTweets.new(        :weight => 2,   :value => 15, :countdown => 10),
  GuessLocationOfTweet.new( :weight => 3,   :value => 25, :countdown => 10),
  GuessLanguageOfTweet.new( :weight => 1,   :value => 10, :countdown => 10),
  WhichIsFromCeleb.new(     :weight => 20,  :value => 30, :countdown => 10)
)

def generate_questions
  if Question.count < $max_questions and Tweet.count > $min_tweets
    $question_types.choose.generate
  else
    sleep $sleep_period
  end
end

def good_tweet?(tweet)
  tweet.hash_tags.size > 0 or
  tweet.retweet_count > 0 or
  tweet.verified_user
end

def catch_tweet(status)
  tweet = Tweet.new(
      :status_id => status.id,
      :screen_name => status.user.screen_name,
      :text => status.text,
      :lang => status.user.lang,
      :location => status.user.location,
      :profile_image_url => status.user.profile_image_url,
      :tweet_count => status.user.statuses_count || 0,
      :follower_count => status.user.followers_count || 0,
      :retweet_count => status.retweet_count || 0,
      :joined_at => status.created_at,
      :verified_user => status.user.verified)
  tweet.save if good_tweet? tweet
rescue Exception => e
  Rails.logger.error e
end

def catch_tweets
  TweetStream::Client.new($twitter_user, $twitter_password).on_delete do |status_id, user_id|
    Tweet.delete_all(:status_id => status_id)
  end.sample do |status, client|
    if Tweet.count < $max_tweets
      catch_tweet(status)
    else
      sleep $sleep_period
    end
  end
end

def cull_tweets
  sleep $sleep_period
  Tweet.delete_all(['created_at < ?', Time.zone.now - 24.hours])
end

def cull_questions
  sleep $sleep_period
  Question.delete_all(['created_at < ?', Time.zone.now - 24.hours])
end

def continually
  loop do
    begin
      yield
    rescue Exception => e
      Rails.logger.error e
    end
  end
end

pid = fork do
  threads = [
    Thread.new { continually { catch_tweets } },
    Thread.new { continually { generate_questions } },
    Thread.new { continually { cull_tweets } },
    Thread.new { continually { cull_questions } }
  ]
  threads.each {|_| _.join }
end

Process.detach pid
